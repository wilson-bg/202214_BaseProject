{
	"info": {
		"_postman_id": "fcba8bb0-5573-4613-8507-359e5bf32bdb",
		"name": "Store-Product tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18014154"
	},
	"item": [
		{
			"name": "Create a new product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"product_id\", data.id);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 201;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"name\": \"Product 1\",\r\n \"price\": 1000,\r\n \"type\": \"Perecedero\"\r\n}\r\n  ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"store_id\", data.id);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 201;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"name\": \"Adidas\",\r\n \"city\": \"Bog\",\r\n \"address\": \"742 Evergreen Terrace\"\r\n}\r\n  ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add store to product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"store_product_id\", data.id);\r",
							"tests[\"POST request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add store invalid to product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"The store with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all stores by product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"GET request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  store by product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"tests[\"GET request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  store by product invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"he product with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a store by product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"postman.setGlobalVariable(\"store_product_id\", data.id);\r",
							"tests[\"PUT request doesn't fail\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n    \"name\": \"Adidas ZX\",\r\n    \"city\": \"Bog\",\r\n    \"address\": \"742 Evergreen Terrace\",\r\n    \"id\": \"{{store_id}}\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a store invalid by product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"The store with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n    \"name\": \"Adidas ZX\",\r\n    \"city\": \"Bog\",\r\n    \"address\": \"742 Evergreen Terrace\",\r\n    \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a store by product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"DELETE request doesn't fail\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a store by product invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Entity with requested ID exists\"] = responseCode.code === 404; \r",
							"tests[\"Correct error message\"] = responseBody.has(\"The product with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000/api/v1",
			"type": "string"
		}
	]
}